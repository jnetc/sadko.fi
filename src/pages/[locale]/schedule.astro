---
// Global Styles
import '@Styles/articles_page.css';
// Query
import query, { repeatableQuery } from '@Queries/page_schedule';
// Layouts
import Layout from '@Layouts/Layout.astro';
import ScheduleSection from '@Components/schedule/ScheduleSection.astro';
// Locale
import { main_locale } from '@Locales/main_locale';
// Libs
import { single, toMarkdown, repeatable } from '@Lib/prismiccms';
// Types
import type { ISchedule, ISchedulePage } from '@Types';

const lang = Astro.currentLocale as 'ru' | 'fi';

const response = await single(query, 'page_schedule', lang);
const schedule = await repeatable(repeatableQuery, 'schedule', lang);

const data = response.data as ISchedulePage;
const md = await toMarkdown(data.text);
---

<script>
  const select = document.querySelector<HTMLSelectElement>('.schedule-select__select');
  const schedule = document.querySelectorAll<HTMLDivElement>('.schedule__item');

  select?.addEventListener('change', (ev: Event) => {
    const value = (ev.target as HTMLSelectElement).value;

    schedule.forEach(i => {
      if (value === 'all') {
        return (i.style.display = 'flex');
      }
      if (i.dataset.id === value) {
        return (i.style.display = 'flex');
      }

      i.style.display = 'none';
    });
  });
</script>

<Layout>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <title>{data.seo_title}</title>
    <meta name="description" content={data.seo_description} />
    <link rel="canonical" href={`https://sadko.fi/${lang}/schedule`} hreflang={lang} />
  </head>

  <main class="grid separator schedule-page">
    <div class="page-header column-sized">
      <h1 class="header__heading">{data.title}</h1>
      <h2 class="header__sub-heading">{data.subtitle}</h2>
      {
        data.text ? (
          <div class="page-header__description markdown font-20">
            <Fragment set:html={md} />
          </div>
        ) : null
      }
    </div>
    <div class="schedule-select">
      <svg class="schedule-select__icon" aria-hidden="true">
        <use xlink:href="/svg/ui_icons.svg#arrow_drop_down"></use>
      </svg>
      <select class="schedule-select__select">
        <option value="all">{main_locale[lang].schedule_select}</option>
        {
          schedule.map(i => {
            const data = i.data as ISchedule;
            return <option value={i.id}>{data.name}</option>;
          })
        }
      </select>
    </div>

    <section class="schedule">
      {
        schedule.map(i => {
          const data = i.data as ISchedule;
          return <ScheduleSection data={data} id={i.id} />;
        })
      }
    </section>
  </main>
</Layout>

<style>
  .schedule-page {
    justify-items: center;
  }

  .schedule {
    grid-column: 2 / -2;
    width: min(1200px, 100%);
    display: flex;
    flex-direction: column;
    gap: var(--gap-96);
  }

  .schedule-select {
    grid-column: 2 / -2;
    display: grid;
    position: relative;
  }

  .schedule-select__icon {
    width: 1.5rem;
    aspect-ratio: 1;
    position: absolute;
    inset-block: 1rem;
    right: 1rem;
    fill: var(--violet);
    pointer-events: none;
    user-select: none;
  }

  .schedule-select__select {
    appearance: none;
    max-width: max-content;
    padding-block: var(--gap-16);
    padding-inline: var(--gap-16) var(--gap-40);
    border: 1.5px solid var(--violet-light);
    border-radius: var(--border-corner-8);
    outline-color: var(--violet);
    font-family: 'Comfortaa', sans-serif;
    -webkit-font-smoothing: antialiased;
    font-size: clamp(var(--font-16), 2vw, var(--font-18));
    cursor: pointer;
  }
  .shedule-select:focus-visible {
    border-color: var(--violet);
  }

  @media (max-width: 960px) {
    .schedule {
      min-width: 100%;
    }
  }
</style>
