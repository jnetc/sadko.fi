---
// Global Styles
import '@Styles/articles_page.css';
// Query
import query, { repeatableQuery } from '@Queries/page_schedule';
// Layouts
import Layout from '@Layouts/Layout.astro';
// import BlankItem from '@Components/ui-elements/BlankItem.astro';
// Locale
import { main_locale } from '@Locales/main_locale';
// Types
import type { ISchedule, ISchedulePage } from '@Types';

const lang = Astro.currentLocale as 'ru' | 'fi';

import { single, toMarkdown, repeatable } from '@Lib/prismiccms';
const response = await single(query, 'page_schedule', lang);
// LOCAL DATA!!!
// Remove CACHE folder to get updated data!!!
// import { SingleLocaleData } from '@Lib/localdata';
// const response = await SingleLocaleData(query, 'gallery', lang);

const data = response.data as ISchedulePage;
const schedule = await repeatable(repeatableQuery, 'schedule', lang);
const md = await toMarkdown(data.text);

console.log(schedule);
---

<script>
  const select = document.querySelector<HTMLSelectElement>('.schedule-select__select');
  const schedule = document.querySelectorAll<HTMLDivElement>('.schedule__item');

  select?.addEventListener('change', (ev: Event) => {
    const value = (ev.target as HTMLSelectElement).value;

    schedule.forEach(i => {
      if (value === 'all') {
        return (i.style.display = 'block');
      }
      if (i.dataset.id === value) {
        return (i.style.display = 'block');
      }

      i.style.display = 'none';
    });
  });
</script>

<Layout>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <title>{data.seo_title}</title>
    <meta name="description" content={data.seo_description} />
  </head>

  <main class="grid separator">
    <div class="page-header column-sized">
      <h1 class="header__heading">{data.title}</h1>
      <h2 class="header__sub-heading">{data.subtitle}</h2>
      {
        data.text && (
          <div class="page-header__description">
            <Fragment set:html={md} />
          </div>
        )
      }
    </div>
    <div class="schedule-select">
      <svg class="schedule-select__icon">
        <use xlink:href="/svg/ui_icons.svg#arrow_drop_down"></use>
      </svg>
      <select class="schedule-select__select">
        <option value="all">{main_locale[lang].select_schedule}</option>
        {
          schedule.map(i => {
            const data = i.data as ISchedule;
            return <option value={i.id}>{data.place}</option>;
          })
        }
      </select>
    </div>

    <section class="schedule">
      {
        schedule.map(i => {
          const data = i.data as ISchedule;
          return (
            <h1 class="schedule__item" data-id={i.id}>
              {data.place}
            </h1>
          );
        })
      }
    </section>
  </main>

  <style>
    .schedule {
      grid-column: 2 / -2;
      max-width: 70ch;
      justify-self: center;
    }
    .schedule-select {
      display: grid;
      grid-column: 2 / -2;
      justify-self: center;
      position: relative;
    }
    .schedule-select__icon {
      width: 2rem;
      aspect-ratio: 1;
      position: absolute;
      inset-block: 18%;
      right: 0.5rem;
      fill: var(--violet);
    }
    .schedule-select__select {
      appearance: none;
      max-width: max-content;
      padding-block: var(--gap-16);
      padding-inline: var(--gap-16) var(--gap-40);
      border: 1.5px solid var(--violet-light);
      border-radius: var(--border-corner-8);
      outline-color: var(--violet);
      font-family: 'Comfortaa', sans-serif;
      -webkit-font-smoothing: antialiased;
      font-size: var(--font-18);
      cursor: pointer;
    }
    .shedule-select:focus-visible {
      border-color: var(--violet);
    }
  </style>
</Layout>
