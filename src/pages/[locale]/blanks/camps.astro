---
// Global Styles
import '@Styles/articles_page.css';
import '@Styles/blanks.css';
// Query
import { campsBlankQuery } from '@Queries/page_blanks';
// Layouts
import Layout from '@Layouts/Layout.astro';
import BackwardButton from '@Components/ui-elements/BackwardButton.astro';
import SubmitButton from '@Components/page-blank/SubmitButton.astro';
import AcceptRules from '@Components/page-blank/AcceptRules.astro';
import ParentFieldset from '@Components/page-blank/ParentFieldset.astro';
import ChildFieldset from '@Components/page-blank/ChildFieldset.astro';
import SelectActivity from '@Components/page-blank/SelectActivity.astro';
// Locale
import { locale_camp_blank } from '@Locales/blanks';
// Libs
import { single, toMarkdown } from '@Lib/prismiccms';
// Type
import type { IBlankPage } from '@Types';

const lang = Astro.params.locale as 'ru' | 'fi';

const response = await single(campsBlankQuery, 'page_blank-camp', lang, ['camp.title', 'camp.date', 'camp.time']);

const data = response.data as IBlankPage;
const md = await toMarkdown(data.sub_title);

const { rule_href, ...select } = locale_camp_blank[lang];
---

<script>
  // Helpers
  import { sendmail, createFormObject } from '@Helpers/emailFunctions';

  const form = document.querySelector<HTMLButtonElement>('.form')!;
  const inputs = [...document.querySelectorAll<HTMLInputElement>('[data-input]')];
  const policy = document.getElementById('policy') as HTMLInputElement;
  // ANTISPAM
  const honeypod = document.querySelector('[name="_honey"]') as HTMLInputElement;
  // Form elements
  const warning = form.querySelector<HTMLParagraphElement>('.warning')!;
  const submit = form.querySelector<HTMLDivElement>('.submit')!;
  const button = form.querySelector<HTMLButtonElement>('.btn-submit')!;

  // Handle form submit
  async function openSubMenu(event: Event) {
    event.preventDefault();

    // Check SPAMBOT
    if (honeypod.value) return;

    // remove last field from required
    const check = inputs.slice(0, -1).every(i => (i.value ? true : false));

    // Remove waining attention
    warning.classList.remove('show');

    // Check all required fields and checkbox
    if (!policy.checked || !check) {
      return;
    }

    // Show waining animation
    submit.classList.add('pending');
    button.disabled = true;

    const data = createFormObject(inputs, 'camp');

    // Get result from API
    const response = await sendmail(data);
    const result = (await response.json()) as { status: number };

    // Disable waining animation
    submit.classList.remove('pending');
    button.disabled = false;

    // Redirect to success page and reset form fields
    if (result.status === 200) {
      inputs.forEach(i => (i.value = ''));
      policy.checked = false;
      // Redirect
      window.location.href = `/${document.documentElement.lang}/blanks/success`;
      return;
    }

    // Show message if we have an error
    if (result.status === 400) {
      warning.classList.add('show');
    }
  }

  form?.addEventListener('submit', openSubMenu);
</script>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>{data.seo_title}</title>
  <meta name="description" content={data.seo_description} />
  <meta name="googlebot" content="noindex nofollow" />
  <meta name="robots" content="noindex nofollow" />
</head>

<Layout>
  <main class="grid separator blank">
    <BackwardButton isOneColumn />
    <div class="page-header column-sized">
      <h1 class="header__heading">{data.seo_title}</h1>
      <div class="page-header__description markdown font-20">
        <Fragment set:html={md} />
      </div>
      <p class="header__important">{data.important}</p>
    </div>
    <form class="form" method="POST">
      <!-- honeypot -->
      <input type="hidden" name="_honey" style="display:none !important" tabindex="-1" />

      <SelectActivity data={select} options={data.select} />
      <ChildFieldset />
      <ParentFieldset />
      <AcceptRules hrefRule="camp" hrefName={rule_href} />
      <SubmitButton />

      <svg>
        <use xlink:href="/svg/ui_shapes.svg#page_stroke_02"></use>
      </svg>
      <svg>
        <use xlink:href="/svg/ui_shapes.svg#page_stroke_01"></use>
      </svg>
      <svg>
        <use xlink:href="/svg/ui_shapes.svg#page_stroke_02"></use>
      </svg>
    </form>
  </main>
</Layout>
