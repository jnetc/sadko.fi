---
export const prerender = true;
// Global Styles
import '@Styles/articles_page.css';
import '@Styles/articles_slug.css';
// Query
import { repeatableQuery } from '@Queries/page_articles';
// Types
import type { IArticle } from '@Types';
// Layouts
import Layout from '@Layouts/Layout.astro';
import BackwardButton from '@Components/ui-elements/BackwardButton.astro';
// Helpers
import publishDate from '@Helpers/publishDate';
// Locales
import { main_locale } from '@Locales/main_locale';
// Libs
import { staticPath, repeatable, toMarkdown } from '@Lib/prismiccms';
// LOCAL DATA!!!
// Remove CACHE folder to get updated data!!!
// import { RepeatableLocaleData } from '@Lib/localdata';
// import { toMarkdown } from '@Lib/prismiccms';

const lang = Astro.currentLocale as 'ru' | 'fi';
const path = Astro.url.pathname.split('/')[2];

export async function getStaticPaths() {
  const response = await staticPath(repeatableQuery, 'article');
  // LOCAL DATA!!!
  // Remove CACHE folder to get updated data!!!
  // const response = await RepeatableLocaleData(repeatableQuery, 'articles');

  return response.flatMap(master => {
    const data = master.data as IArticle;
    return [
      {
        params: { locale: 'ru', slug: data.slug.url },
        props: { slug: data.slug.url },
      },
      {
        params: { locale: 'fi', slug: data.slug.url },
        props: { slug: data.slug.url },
      },
    ];
  });
}

const response = await repeatable(repeatableQuery, 'article', lang);
// const response = await RepeatableLocaleData(repeatableQuery, 'articles', lang);

const { slug } = Astro.props;

const [page] = response.filter(i => {
  const data = i.data as IArticle;

  if (data.slug.url !== slug) return;

  data.publication_date = i.last_publication_date;
  return data;
});

const data = page.data as IArticle;
const md = await toMarkdown(data.text);
---

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width" />
  <title>{data.seo_title}</title>
  <meta name="description" content={data.seo_description} />
</head>

<Layout>
  <main class="grid page">
    <BackwardButton href={`/${lang}/${path}`} isBack />
    <time datetime={data.publication_date.split('T')[0]}>
      {main_locale[lang].publish}
      {publishDate(data.publication_date, lang)}
    </time>
    <h1 class="page__title">{data.title}</h1>
    <p class="page__author">{data.author}</p>
    <img
      class="page__image page__image-post"
      src={data.image.url}
      alt={data.image.alt}
      height={data.image.dimensions.height}
      width={data.image.dimensions.width}
    />
    <div class="page__content markdown">
      <Fragment set:html={md} />
    </div>
  </main>
</Layout>

<style>
  .page > :not(a, img) {
    width: 100%;
    max-width: 640px;
    justify-self: center;
    grid-column: 2 / -2;
  }

  time {
    grid-row: 1;
    align-self: center;
  }

  .page__title {
    padding-block: var(--gap-14) var(--gap-24);
  }

  .page__author {
    padding-block-end: var(--gap-16);
  }

  .page__content {
    padding-block-start: var(--gap-48);
  }

  @media (max-width: 959px) {
    time {
      grid-row: auto;
    }
  }
</style>
