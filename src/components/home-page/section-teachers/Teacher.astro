---
import type { ImageType, SlugType, HeadingTextType } from "@Types";

interface Props extends SlugType, HeadingTextType {
  image: ImageType;
}

const { heading, text, image, slug } = Astro.props;
---

<li class="card">
  <a class="card__href" href=`${slug.url}`>
    <img
      src={image.url}
      alt={image.alt}
      width={image.dimensions.width}
      height={image.dimensions.height}
      class="card__image"
    />
    <h3>{heading}</h3>
    <p>{text}</p>
    <div class="card__icon" aria-hidden="true">
      <svg class="icon">
        <use xlink:href=`/svg/ui_icons.svg#arrow_outward`></use>
      </svg>
      <svg class="cookie">
        <use xlink:href=`/svg/ui_icons.svg#cookie`></use>
      </svg>
    </div>
  </a>
</li>

<style>
  .card {
    scroll-padding-inline-start: var(--gap-32);
    scroll-margin-inline-start: var(--gap-32);
    scroll-snap-align: start;
    scroll-snap-stop: always;
    /* block-size: 432px; */
    /* display: flex; */
    /* flex-direction: column; */
    border-radius: var(--border-corner-32);
    /* gap: var(--gap-16); */
    overflow: hidden;
    position: relative;
  }
  .card__href {
    height: 100%;
    display: grid;
    grid-template-rows: auto 3rem auto;
    gap: var(--gap-16);

    /* flex-direction: column; */
    padding: var(--gap-48) var(--gap-32) var(--gap-96);
    /* padding: var(--gap-24) var(--gap-24) var(--gap-48); */
  }
  .card:nth-of-type(5n - 4) {
    background-color: var(--violet-light);
  }
  .card:nth-of-type(5n - 3) {
    background-color: var(--green);
  }
  .card:nth-of-type(5n - 2) {
    background-color: var(--pink);
  }
  .card:nth-of-type(5n - 1) {
    background-color: var(--violet);
  }
  .card:nth-of-type(5n) {
    background-color: var(--black);
  }

  .card__icon {
    display: grid;
    width: max-content;
    flex-grow: 1;
    margin-inline-start: auto;
    position: absolute;
    bottom: var(--gap-32);
    right: var(--gap-32);
  }
  .card__image {
    width: 150px;
    height: 150px;
    margin-inline: auto;
    border-radius: 100vw;
    object-fit: cover;
  }

  .icon,
  .cookie {
    grid-column: 1;
    grid-row: 1;
    aspect-ratio: 1;
    justify-self: center;
    align-self: center;
  }

  .icon {
    width: var(--size-32);
    fill: var(--black);
  }
  .card:nth-of-type(5n - 1) .icon,
  .card:nth-of-type(5n) .icon {
    fill: var(--white);
  }

  .cookie {
    width: var(--size-64);
    stroke: var(--black);
  }
  .card:nth-of-type(5n - 1) .cookie,
  .card:nth-of-type(5n) .cookie {
    stroke: var(--white);
  }

  h3,
  p {
    color: var(--black);
  }
  .card:nth-of-type(5n - 1) :is(h3, p),
  .card:nth-of-type(5n) :is(h3, p) {
    color: var(--white);
  }

  h3 {
    /* min-height: 3rem; */
    align-self: flex-end;
    font-size: var(--font-24);
  }
  p {
    min-block-size: var(--size-56);
    font-size: var(--font-16);
    line-height: 1.4;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 3;
    overflow: hidden;
  }
</style>
