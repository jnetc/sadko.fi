---
import { toMarkdown } from "@Helpers/toMarkdown";

import type { RichTextField } from "@prismicio/client";
interface Props {
  heading: string;
  markdown: RichTextField;
}

const { heading, markdown } = Astro.props;
const md = await toMarkdown(markdown);
---

<li class="faq__details">
  <h3 class="faq__summary" data-index="0" tabindex="0">
    {heading}
    <span class="faq__summary-icon"></span>
  </h3>
  <div class="faq__p">
    <Fragment set:html={md} />
  </div>
</li>

<style>
  .faq__details {
    grid-column: 2;
    display: grid;
    grid-template-rows: min-content 0fr;
    border-radius: var(--border-corner-16);
    border: 1px solid var(--violet);
    box-shadow:
      0 25px 20px var(--opacity-3),
      0 15px 10px var(--opacity-3);
    transition:
      grid-template-rows 0.3s ease-in-out,
      padding-block 0.3s ease-in-out,
      box-shadow 0.3s ease-in-out;
  }
  .faq__details:has(.faq__summary.open) {
    grid-template-rows: min-content 1fr;
    box-shadow:
      0 25px 20px transparent,
      0 15px 10px transparent;
  }

  .faq__summary {
    padding-block: var(--gap-16);
    padding-inline: var(--gap-32);
    grid-row: 1;
    display: grid;
    grid-template-columns: 1fr var(--size-32);
    align-items: center;
    gap: var(--gap-16);
    position: relative;
    color: var(--black);
    font-size: clamp(var(--font-20), 3vw, var(--font-32));
    font-weight: bold;
    list-style-type: none;
    transition: padding-block 0.3s ease-in-out;
    cursor: pointer;
  }
  .faq__summary.open {
    padding-block: var(--gap-32);
  }

  .faq__summary,
  .faq__p {
    padding-inline: var(--gap-32);
  }

  .faq__summary-icon {
    width: var(--size-32);
    height: var(--size-32);
    position: relative;
    border-radius: 100vw;
    border: 2px solid var(--violet);
  }
  .faq__summary-icon::after,
  .faq__summary-icon::before {
    content: "";
    position: absolute;
    height: 2px;
    width: 50%;
    top: 50%;
    left: 50%;
    background-color: var(--violet);
    translate: -50% -50%;
    transition:
      rotate 0.3s ease-in-out,
      opacity 0.3s ease-in-out;
  }
  .faq__summary-icon::before {
    rotate: z 90deg;
  }
  .faq__summary.open .faq__summary-icon::before {
    rotate: z 0deg;
    opacity: 0;
  }

  .faq__details .faq__p {
    grid-row: 2;
    display: grid;
    row-gap: var(--gap-16);
    font-size: clamp(var(--font-16), 2.1vw, var(--font-20));
    color: var(--grey-300);
    line-height: 1.4;
    overflow: hidden;
    transition: padding-block 0.3s ease-in-out;
  }
  .faq__summary.open + .faq__p {
    padding-block-end: var(--gap-48);
  }

  .faq__p :global(a) {
    text-decoration: underline var(--violet);
  }

  @media (max-width: 1200px) {
    .faq__summary,
    .faq__p {
      padding-inline: var(--gap-16);
    }
  }
</style>
