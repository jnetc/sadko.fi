---
// Helpers
import { toMarkdown } from '@Lib/prismiccms';
// Locale
import { main_locale } from '@Locales/main_locale';
// Types
import type { IFeedback } from '@Types';

interface Props {
  data: IFeedback;
}

const lang = Astro.currentLocale as 'ru' | 'fi';

const { color, name, text, slug } = Astro.props.data;
const md = await toMarkdown(text);
---

<script>
  const feedbacks = document.querySelectorAll<HTMLElement>('.feedback');

  function openSubMenu(event: Event) {
    const btn = event.target as HTMLButtonElement;
    const feedback = btn.closest('.feedback')!;
    feedback.classList.toggle('show-all');

    // const timer = setTimeout(() => {
    //   feedback.scrollIntoView({
    //     behavior: 'smooth',
    //   });
    //   clearTimeout(timer);
    // }, 600);
  }

  feedbacks.forEach(feedback => {
    const txt = feedback.querySelector<HTMLElement>('.feedback__text')!.scrollHeight;
    const btn = feedback.querySelector<HTMLButtonElement>('.feedback__btn')!;
    if (txt <= 150) {
      btn.remove();
      return;
    }

    btn.addEventListener('mousedown', openSubMenu);
  });
</script>

<article class="feedback" id={slug.url}>
  <svg class={`feedback__svg fill-${color}`}>
    <use xlink:href="/svg/shapes.svg#shape_02"></use>
  </svg>
  <h2 class="feedback__name">{name}</h2>
  <div class="markdown feedback__text">
    <Fragment set:html={md} />
  </div>
  <button class="btn btn-secondary arrow-icon feedback__btn">
    <p class="btn__more">{main_locale[lang].button_more}</p>
    <p class="btn__hide">{main_locale[lang].button_hide}</p>
    <span class="btn__icon" aria-hidden="true">
      <svg>
        <use xlink:href="/svg/ui_icons.svg#arrow_backward" data-xlink="arrow_backward"></use>
      </svg>
    </span>
  </button>
</article>

<style>
  .feedback__svg {
    grid-column: 2;
    grid-row: 2 span;
    max-width: 360px;
    aspect-ratio: 1;
    /* stroke-width: 20; */
    justify-self: flex-end;
    z-index: -1;
  }

  .feedback {
    max-width: 70ch;
    grid-column: 2 / -2;
    justify-self: center;
    display: grid;
    /* grid-template-columns: 1fr; */
    grid-template-rows: min-content 120px 0fr min-content;
    gap: var(--gap-12);
    border-radius: var(--border-corner-32);
    padding: var(--gap-32);
    background-color: var(--white);
    box-shadow:
      0 25px 20px var(--opacity-3),
      0 15px 10px var(--opacity-3);
    transition: grid-template-rows 0.3s ease-in-out;
  }
  .feedback.show-all {
    grid-template-rows: min-content 120px 1fr min-content;
  }

  /* .section:nth-of-type(odd) .feedback {
    grid-column: 6 / -4;
  }
  .section:nth-of-type(even) .feedback {
    grid-column: 4 / -6;
  } */

  /* .feedback__image {
    grid-column: 1;
    grid-row: 1;
    width: 100%;
    height: 100%;
    border-radius: 100vw;
    object-fit: cover;
    object-position: center;
  } */
  .feedback__name {
    /* grid-column: 1; */
    grid-row: 1;
    width: min-content;
    align-self: center;
    color: var(--black);
    font-size: clamp(var(--font-20), 4vw, var(--font-36));
    line-height: 1.2;
  }
  /* .feedback__links {
    grid-column: 2 span;
    grid-row: 3;
    display: flex;
    flex-wrap: wrap;
    gap: var(--gap-8);
    align-items: flex-start;
  } */
  /* .feedback__label {
    grid-column: 2 span;
    grid-row: 2;
    color: var(--black);
    font-size: clamp(var(--font-16), 2.5vw, var(--font-18));
  } */

  .feedback__text {
    /* grid-column: 2 span; */
    grid-row: 2 / 2 span;
    overflow: hidden;
    color: var(--grey-300);
    position: relative;
  }
  .feedback__text::after {
    content: '';
    position: absolute;
    inset: 50% 0 0;
    background-image: linear-gradient(to top, var(--white) 10%, transparent);
    pointer-events: none;
  }

  .feedback__text::after {
    content: '';
    position: absolute;
    inset: 50% 0 0;
    background-image: linear-gradient(to top, var(--white) 10%, transparent);
    pointer-events: none;
    transition: all 0.3s ease-in-out;
  }
  .feedback.show-all .feedback__text::after {
    background-image: linear-gradient(to top, transparent 10%, transparent);
  }

  .feedback__btn {
    grid-row: 4;
    justify-self: center;
  }
  .feedback__btn span {
    rotate: z -90deg;
  }
  .feedback.show-all .feedback__btn span {
    rotate: z 90deg;
  }
  .feedback.show-all .btn__more,
  .feedback .btn__hide {
    display: none;
  }
  .feedback.show-all .btn__hide {
    display: block;
  }

  @media (max-width: 520px) {
    .feedback {
      grid-template-rows: 1fr 64px 0fr min-content;
      padding: var(--gap-24);
    }
  }
</style>
