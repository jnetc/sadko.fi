---
// Helpers
import { toMarkdown } from '@Lib/prismiccms';
// Locale
import { locale_buttons } from '@Locales/buttons';
// Types
import type { IFeedback } from '@Types';

interface Props {
  data: IFeedback;
  index: number;
}

const lang = Astro.currentLocale as 'ru' | 'fi';

const { index, data } = Astro.props;
const md = await toMarkdown(data.text);

const shapeNumber = (index % 12) + 1;
---

<script>
  const feedbacks = document.querySelectorAll<HTMLElement>('.feedback');

  function openSubMenu(event: Event) {
    const btn = event.target as HTMLButtonElement;
    const feedback = btn.closest('.feedback')!;
    feedback.classList.toggle('show-all');

    const timer = setTimeout(() => {
      feedback.scrollIntoView({
        behavior: 'smooth',
      });
      clearTimeout(timer);
    }, 0);
  }

  feedbacks.forEach(feedback => {
    const btn = feedback.querySelector<HTMLButtonElement>('.feedback__btn')!;
    if (!btn) {
      return;
    }

    btn.addEventListener('mousedown', openSubMenu);
  });
</script>

<article class="feedback" id={data.slug.url}>
  <svg class={`feedback__svg fill-${data.color}`}>
    <use xlink:href=`/svg/shapes.svg#shape${shapeNumber}`></use>
  </svg>
  <h2 class="feedback__name">{data.name}</h2>
  <div class="markdown feedback__text">
    <Fragment set:html={md} />
  </div>
  {
    md.length > 300 ? (
      <button class="btn btn-secondary arrow-icon feedback__btn">
        <p class="btn__more">{locale_buttons[lang].button_more}</p>
        <p class="btn__hide">{locale_buttons[lang].button_hide}</p>
        <span class="btn__icon" aria-hidden="true">
          <svg>
            <use xlink:href="/svg/ui_icons.svg#arrow_backward" data-xlink="arrow_backward" />
          </svg>
        </span>
      </button>
    ) : null
  }
</article>

<style>
  .feedback__svg {
    max-width: 120px;
    aspect-ratio: 1;
    position: absolute;
    top: -3rem;
    right: 2rem;
  }

  .feedback {
    max-width: 70ch;
    grid-column: 2 / -2;
    justify-self: center;
    display: flex;
    flex-direction: column;
    position: relative;
    border-radius: var(--border-corner-32);
    padding: var(--gap-32);
    background-color: var(--white);
    box-shadow:
      0 25px 20px var(--opacity-3),
      0 15px 10px var(--opacity-3);
  }

  .feedback__name {
    width: min-content;
    position: relative;
    color: var(--black);
    font-size: clamp(var(--font-24), 4vw, var(--font-28));
    line-height: 1.2;
    z-index: 1;
  }

  .feedback__text {
    max-height: 9rem;
    padding-block-start: var(--gap-16);
    overflow: hidden;
    position: relative;
  }
  .feedback__text::after {
    content: '';
    position: absolute;
    inset: 50% 0 0;
    background-image: linear-gradient(to top, var(--white) 10%, transparent);
    transition: all 0.3s ease-in-out;
    pointer-events: none;
  }

  .feedback.show-all .feedback__text {
    max-height: 100%;
  }
  .feedback.show-all .feedback__text::after {
    background-image: linear-gradient(to top, transparent 10%, transparent);
  }
  .feedback:not(:has(button)) .feedback__text {
    max-height: 100%;
  }
  .feedback:not(:has(button)) .feedback__text::after {
    background-image: none;
  }

  .feedback__btn {
    margin-inline: auto;
  }
  .feedback__btn span {
    rotate: z -90deg;
  }
  .feedback.show-all .feedback__btn span {
    rotate: z 90deg;
  }
  .feedback.show-all .btn__more,
  .feedback .btn__hide {
    display: none;
  }
  .feedback.show-all .btn__hide {
    display: block;
  }

  @media (max-width: 520px) {
    .feedback {
      padding: var(--gap-24) var(--gap-24) var(--gap-36);
    }
  }
</style>
