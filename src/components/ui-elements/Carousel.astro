---
import CircleButton from './CircleButton.astro';
---

<script>
  const prevButtons = document.querySelectorAll<HTMLButtonElement>('[data-dir="prev"]')!;
  const nextButtons = document.querySelectorAll<HTMLButtonElement>('[data-dir="next"]')!;
  const cards = document.querySelectorAll<HTMLUListElement>('.cards')!;
  const scrollArea = document.querySelectorAll<HTMLDivElement>('.scroll-area')!;

  function moveCarousel(event: MouseEvent, index: number) {
    const el = event.target as HTMLButtonElement;
    // Last visible spase between cards
    const gap = 32;
    // Get the width of the scroll area and substract the last gap to get the four card and three gaps
    // because last gap we don't need to calculate it for smooth animation if we use scrollbar after pressed a buttons
    const scrollStep = Math.round(scrollArea[index].getBoundingClientRect().width) - gap;
    // Removing the snapped class from the carousel to make it easier to move all cards within the visible area
    cards[index].classList.remove('snapped');
    // Creating a direction when a button was clicked
    // const direction = el.dataset.dir === 'prev' ? -1 : 1;
    const direction = el.dataset.dir === 'prev' ? -scrollStep : scrollStep;
    // Move all cards array in current direction
    cards[index].scrollBy({ left: direction, behavior: 'smooth' });
  }

  function showControlButton(event: Event, index: number) {
    const el = event.target as HTMLElement;

    el.scrollLeft > 0 ? prevButtons[index].classList.remove('hide') : prevButtons[index].classList.add('hide');

    Math.round(el.scrollLeft) >= cards[index].scrollWidth - cards[index].clientWidth
      ? nextButtons[index].classList.add('hide')
      : nextButtons[index].classList.remove('hide');
  }

  function snapping(event: Event) {
    const el = event.target as HTMLElement;
    // We add a snapped class to the carousel to make its animation smoother and maintain position accuracy
    el.classList.add('snapped');
  }

  scrollArea.forEach(area => {
    area.addEventListener('mousedown', ev => snapping(ev));
  });
  cards.forEach((arr, index) => {
    arr.addEventListener('scroll', ev => showControlButton(ev, index));
  });
  prevButtons.forEach((btn, index) => {
    btn.addEventListener('click', ev => moveCarousel(ev, index));
  });
  nextButtons.forEach((btn, index) => {
    btn.addEventListener('click', ev => moveCarousel(ev, index));
  });
</script>

<div class="carousel">
  <svg class="carousel-arrow-top">
    <use xlink:href="/svg/ui_shapes.svg#page_arrow_shot"></use>
  </svg>
  <CircleButton icon="arrow" dataValue="prev" extraClass="hide" />
  <div class="scroll-area">
    <ul class="cards snapped">
      <slot />
    </ul>
  </div>
  <CircleButton icon="arrow" dataValue="next" />
  <svg class="carousel-arrow-bottom">
    <use xlink:href="/svg/ui_shapes.svg#page_arrow_shot"></use>
  </svg>
</div>

<style>
  .carousel {
    grid-column: 2 / -2;
    width: 100%;
    display: flex;
    flex-direction: column;
    position: relative;
  }

  .scroll-area {
    display: grid;
    row-gap: var(--gap-16);
    position: relative;
    overflow-x: hidden;
    scroll-behavior: smooth;
  }

  .cards {
    display: grid;
    grid-auto-flow: column;
    grid-auto-columns: calc(100% / 4 - var(--gap-24));
    column-gap: var(--gap-32);
    padding-inline: var(--gap-32);
    padding-block: var(--gap-48) var(--gap-32);
    overflow-x: auto;
    scrollbar-width: auto;
    scrollbar-color: var(--violet) var(--white);
    transition: all 0.3s ease-in-out;
  }
  .cards.snapped {
    scroll-snap-type: x mandatory;
  }
  .cards::-webkit-scrollbar {
    width: var(--size-12);
  }
  .cards::-webkit-scrollbar-track {
    background-color: var(--white);
  }
  .cards::-webkit-scrollbar-thumb {
    background-color: var(--violet);
    border-radius: 100vw;
    border: 3px solid var(--white);
  }

  .carousel-arrow-top,
  .carousel-arrow-bottom {
    grid-column: 2 / -2;
    height: 1.5rem;
    aspect-ratio: 2 / 1;
    fill: var(--violet-light);
    translate: -5rem 0;
    opacity: 0;
    animation: swipe 5s ease-in-out infinite;
  }
  .carousel-arrow-top {
    margin-inline: auto 1rem;
  }
  .carousel-arrow-bottom {
    margin-top: 2rem;
    margin-inline: auto;
    animation-delay: 1s;
  }

  @keyframes swipe {
    50% {
      translate: -0rem 0;
      opacity: 1;
    }
    90% {
      opacity: 1;
    }
    95% {
      opacity: 0;
      translate: -0rem 0;
    }
    100% {
      translate: -5rem 0;
    }
  }

  @media screen and (max-width: 1200px) {
    .carousel {
      grid-column: 1 / -1;
    }
    .cards {
      grid-auto-columns: calc(320px - var(--gap-24));
    }
  }
</style>
