---
import type { ITeacher } from '@Types';
interface Props {
  data: ITeacher;
}

const lang = Astro.currentLocale as 'ru' | 'fi';

const { description, name, image, slug, color } = Astro.props.data;
---

<li class=`card bg-${color}`>
  <a class="card__href" href=`/${lang}/teachers/#${slug.url}`>
    <img
      src={image.url}
      alt={image.alt}
      width={image.dimensions.width}
      height={image.dimensions.height}
      class="card__image"
    />
    <h3>{name}</h3>
    <p>{description}</p>
    <div class="card__icon" aria-hidden="true">
      <svg class="icon">
        <use xlink:href=`/svg/ui_icons.svg#arrow_outward`></use>
      </svg>
      <svg class="cookie">
        <use xlink:href=`/svg/ui_icons.svg#cookie`></use>
      </svg>
      <svg class=`card__shape fill-${color}` aria-hidden="true">
        <use xlink:href=`/svg/ui_shapes.svg#shape14`></use>
      </svg>
    </div>
  </a>
</li>

<style>
  .card {
    scroll-padding-inline-start: var(--gap-32);
    scroll-margin-inline-start: var(--gap-32);
    scroll-snap-align: start;
    scroll-snap-stop: always;
    background-color: var(--white);
    border-radius: var(--border-corner-32);
    overflow: hidden;
    position: relative;
    transition: all 0.3s ease-in-out;
    box-shadow:
      0 25px 20px var(--opacity-3),
      0 15px 10px var(--opacity-3);
    z-index: 1;
  }
  .card:hover {
    box-shadow: 0 0 0 0.75rem var(--opacity-10);
  }

  .card__href {
    height: 100%;
    display: grid;
    grid-template-rows: auto min-content auto;
    gap: var(--gap-12);
    padding: var(--gap-48) var(--gap-32) var(--gap-96);
  }

  .card__icon {
    display: grid;
    width: max-content;
    flex-grow: 1;
    margin-inline-start: auto;
    position: absolute;
    bottom: var(--gap-32);
    right: var(--gap-32);
  }
  .card__image {
    width: 150px;
    height: 150px;
    margin-inline: auto;
    border-radius: 100vw;
    object-fit: cover;
  }

  .icon,
  .cookie {
    grid-column: 1;
    grid-row: 1;
    aspect-ratio: 1;
    justify-self: center;
    align-self: center;
  }

  .icon {
    width: var(--size-32);
    fill: var(--black);
  }
  .card.bg-black .icon,
  .card.bg-violet .icon {
    fill: var(--white);
  }

  .card:hover .icon {
    animation: arrow-outward 0.5s ease-in-out forwards;
  }

  @keyframes arrow-outward {
    50% {
      transform: translate(0.5rem, -0.5rem);
      opacity: 0;
    }
    50.01% {
      transform: translate(-0.5rem, 0.5rem);
      opacity: 0;
    }
  }

  .cookie {
    width: var(--size-64);
    stroke: var(--black);
  }
  .card.bg-black .cookie,
  .card.bg-violet .cookie {
    stroke: var(--white);
  }

  .card__shape {
    position: absolute;
    inset: -2.5rem 0 0 0.2rem;
    scale: 2.5;
    z-index: -1;
    pointer-events: none;
    rotate: z 180deg;
  }

  h3 {
    width: min-content;
    align-self: flex-end;
    font-size: var(--font-24);
  }

  p {
    min-block-size: var(--size-56);
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 3;
    overflow: hidden;
  }
</style>
